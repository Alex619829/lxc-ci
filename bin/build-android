#!/usr/bin/python3 -u
# Copyright 2014 - St√©phane Graber <stgraber@ubuntu.com>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
sys.path.insert(0, '.')

import argparse
import lxc_ci
import os
import traceback

parser = argparse.ArgumentParser(description="coverity build")
parser.add_argument("repository", metavar="REPOSITORY")
parser.add_argument("branch", metavar="BRANCH")
parser.add_argument("commit", metavar="COMMIT")
parser.add_argument("target", metavar="TARGET")
args = parser.parse_args()

try:
    build_env = lxc_ci.BuildEnvironment("ubuntu", "xenial")
    build_env.setup()

    if build_env.install(
            list(lxc_ci.LXC_BUILD_DEPENDENCIES['ubuntu']['default'])) != 0:
        build_env.exit_unstable()

    if build_env.architecture in lxc_ci.LXC_BUILD_DEPENDENCIES['ubuntu']:
        if build_env.install(
            list(lxc_ci.LXC_BUILD_DEPENDENCIES['ubuntu']
                 [build_env.architecture])) != 0:
            build_env.exit_unstable()

    build_env.upload("deps/android-ndk-linux-x86_64.zip",
                     "/tmp/ndk.zip")
    build_env.upload("deps/genetlink.h", "/tmp/genetlink.h")

    build_env.execute(["mkdir", "-p", "/build/source"])
    build_env.execute(["mkdir", "-p", "/build/ndk"])
    build_env.execute(["mkdir", "-p", "/build/android"])

    if build_env.execute(["git",
                          "clone", args.repository,
                          "-b", args.branch,
                          "/build/source"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["git",
                          "fetch", args.repository,
                          "+refs/pull/*:refs/remotes/origin/pr/*"],
                         "/build/source") != 0:
        build_env.exit_unstable()

    if build_env.execute(["git", "checkout", args.commit],
                         "/build/source") != 0:
        build_env.exit_unstable()

    if build_env.execute("""#!/bin/sh -ex
unzip -q /tmp/ndk.zip
mv android-ndk-*/* .
rmdir android-ndk-*
""", "/build/ndk/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["cp", "/tmp/genetlink.h",
                          "/build/ndk/platforms/android-21/arch-arm"
                          "/usr/include/linux/genetlink.h"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["git", "clone", "git://git.kernel.org/pub/scm/linux/"
                                          "kernel/git/morgan/libcap.git",
                          "/build/libcap"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["git", "checkout",
                          "0ee94211e95096750ede752acd13b163aa6d5046"],
                          "/build/libcap") != 0:
        build_env.exit_unstable()

    env = []
    env.append("PATH=/build/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/"
               "linux-x86_64/bin/:%s" % os.environ['PATH'])
    env.append("CC=arm-linux-androideabi-gcc "
               "--sysroot=/build/ndk/platforms/android-21/arch-arm/")
    env.append("DESTDIR=/build/android")
    env.append("BUILD_CC=gcc")

    # Build libcap
    if build_env.execute(["env"] + env + ["make", "-e", "LIBATTR=no"],
                         "/build/libcap/libcap/") != 0:
        build_env.exit_unstable()

    if build_env.execute("""#!/bin/sh -ex

cp -P /build/libcap/libcap/libcap.so* \\
    /build/ndk/platforms/android-21/arch-arm/usr/lib/

cp -P /build/libcap/libcap/libcap.a \\
    /build/ndk/platforms/android-21/arch-arm/usr/lib/

mkdir -p /build/android/data/lxc/lxc/lib/
cp -P /build/libcap/libcap/libcap.so* \\
    /build/android/data/lxc/lxc/lib/

cp -P /build/libcap/libcap/include/sys/capability.h \\
    /build/ndk/platforms/android-21/arch-arm/usr/include/sys/

cp -P /build/libcap/libcap/include/uapi/linux/capability.h \\
    /build/ndk/platforms/android-21/arch-arm/usr/include/linux/
""") != 0:
        build_env.exit_unstable()

    # Build LXC
    env.append("LD=arm-linux-androideabi-ld")
    if build_env.execute(["./autogen.sh"], "/build/source/") != 0:
        build_env.exit_fail()

    if build_env.execute(["env"] + env +
                         ["./configure", "--host=arm-eabi",
                          "CFLAGS=-I/build/libcap/libcap/include/",
                          "--disable-api-docs", "--disable-lua",
                          "--disable-python", "--enable-tests",
                          "--disable-examples",
                          "--prefix=/data/lxc/lxc",
                          "--with-runtime-path=/cache/",
                          "--with-config-path=/data/lxc/containers/"],
                         "/build/source/") != 0:
        build_env.exit_fail()

    if build_env.execute(["env"] + env + ["make"], "/build/source/") != 0:
        build_env.exit_fail()

    if build_env.execute(["env"] + env + ["make", "install"],
                         "/build/source/") != 0:
        build_env.exit_fail()

    # Make the tarball
    if build_env.execute(["tar", "-zcf", "/build/lxc-android.tar.gz",
                          "-C", "/build/android", "data"]) != 0:
        build_env.exit_unstable()

    build_env.download("/build/lxc-android.tar.gz", args.target)

    build_env.exit_pass()

except Exception or KeyboardInterrupt:
    traceback.print_exc()
    build_env.exit_unstable()
