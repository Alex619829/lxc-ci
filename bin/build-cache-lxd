#!/bin/sh -eu
[ -e /lxc-ci/etc/config ] && . /lxc-ci/etc/config

if [ "${LXD_GOCACHE:-}" != "true" ]; then
    exit 0
fi

export PATH="${PATH}:/snap/bin"
TEMP_DIR=$(mktemp -d -p /lxc-ci/build/)
cd "${TEMP_DIR}"

cleanup() {
    rm -Rf "${TEMP_DIR}"
}

trap cleanup EXIT HUP INT TERM

# Build the test image
git clone -q https://github.com/mirror/busybox "${TEMP_DIR}/busybox" -b 1_33_0
cd "${TEMP_DIR}/busybox"
make defconfig >/dev/null
echo CONFIG_STATIC=y >> .config
make -j5 >/dev/null 2>&1
cd "${TEMP_DIR}"

mkdir "${TEMP_DIR}/image"
cd "${TEMP_DIR}/image"

mkdir rootfs
cd "${TEMP_DIR}/image/rootfs"
mkdir -p bin dev etc mnt proc root sys tmp
touch etc/inittab
cp "${TEMP_DIR}/busybox/busybox" bin/busybox
for cmd in $(bin/busybox --list-full); do
    [ -z "${cmd}" ] && continue
    [ "${cmd}" = "bin/busybox" ] && continue
    mkdir -p "$(dirname "${cmd}")"
    ln -s /bin/busybox "${cmd}"
done
cd "${TEMP_DIR}/image"

(
cat << EOF
{
    "architecture": "$(uname -m)",
    "creation_date": $(date +%s),
    "properties": {
        "architecture": "$(uname -m)",
        "description": "BusyBox $(uname -m)",
        "name": "busybox-$(uname -m)",
        "os": "BusyBox"
    },
    "templates": {
        "/template": {
            "template": "template.tpl"
        }
    }
}
EOF
) > metadata.yaml

mkdir -p templates
(
cat << EOF
name: {{ container.name }}
architecture: {{ container.architecture }}
privileged: {{ container.privileged }}
ephemeral: {{ container.ephemeral }}
trigger: {{ trigger }}
path: {{ path }}
user.foo: {{ config_get("user.foo", "_unset_") }}
EOF
) > templates/template.tpl

tar -C . -Jcf "${TEMP_DIR}/testimage.tar.xz" *
rm -rf "${TEMP_DIR}/image"
cd "${TEMP_DIR}"

# Build the clustering bits
git clone -q https://github.com/canonical/raft "${TEMP_DIR}/raft"
cd "${TEMP_DIR}/raft"
autoreconf -i >/dev/null 2>&1
./configure --enable-debug >/dev/null 2>&1
make >/dev/null 2>&1
cd "${TEMP_DIR}"

git clone -q https://github.com/canonical/dqlite "${TEMP_DIR}/dqlite"
cd "${TEMP_DIR}/dqlite"
export PKG_CONFIG_PATH="${TEMP_DIR}/raft"
export CFLAGS="-I${TEMP_DIR}/raft/include"
export LDFLAGS="-L${TEMP_DIR}/raft/.libs"
autoreconf -i >/dev/null 2>&1
./configure --enable-debug >/dev/null 2>&1
make >/dev/null 2>&1
cd "${TEMP_DIR}"

# Build the Go cache and binaries
export GOPATH="${TEMP_DIR}/go"
export GOCACHE="${GOPATH}/pkg"

OLD_PATH=${PATH}
for version in 1.13 1.16 1.17 tip; do
    VER=$(echo $version | sed "s/\.//g")
    export PATH="/snap/go_${VER}/current/bin:${OLD_PATH}"

    for pkg in github.com/rogpeppe/godeps \
               github.com/tsenart/deadcode \
               github.com/snapcore/snapd/i18n/xgettext-go \
               github.com/client9/misspell/cmd/misspell \
               github.com/gordonklaus/ineffassign \
               golang.org/x/lint/golint; do
        if [ "${VER}" = "1.13" ]; then
            go get "${pkg}" >/dev/null || true
        else
            go install "${pkg}@latest" >/dev/null || true
        fi
    done

    mkdir -p "${GOPATH}/bin" && mv "${GOPATH}/bin" "${GOPATH}/bin.$(go version | cut -d' ' -f3)"
    mkdir -p "${GOPATH}/pkg" && mv "${GOPATH}/pkg" "${GOPATH}/pkg.$(go version | cut -d' ' -f3)"
done

cd "${TEMP_DIR}"

# Setup the Go cache
export PATH="/snap/go_tip/current/bin:${OLD_PATH}"
mkdir -p "${TEMP_DIR}/go"
export GOPATH=${TEMP_DIR}/go

git clone https://github.com/lxc/lxd
cd lxd
go get -d -t ./...
cd "${TEMP_DIR}"

# Move things into place
rm -Rf /lxc-ci/build/cache.new
mkdir -p /lxc-ci/build/cache.new
rm -Rf "${TEMP_DIR}/go/pkg" "${TEMP_DIR}/go/bin"
mv "${TEMP_DIR}/go" /lxc-ci/build/cache.new/go
mv "${TEMP_DIR}/raft" /lxc-ci/build/cache.new/raft
mv "${TEMP_DIR}/dqlite" /lxc-ci/build/cache.new/dqlite
mv "${TEMP_DIR}/testimage.tar.xz" /lxc-ci/build/cache.new/testimage.tar.xz
chmod -R o+rX /lxc-ci/build/cache.new
rm -Rf /lxc-ci/build/cache.old
[ -e "/lxc-ci/build/cache" ] && mv /lxc-ci/build/cache /lxc-ci/build/cache.old
mv /lxc-ci/build/cache.new /lxc-ci/build/cache
rm -Rf /home/jenkins/.cache/go-build/
