#!/bin/sh -eu
CNAME="distrobuilder-$(uuidgen)"

# Check arguments
if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ]; then
    echo "Usage: ${0} <yaml> <architecture> <target dir> [flags]"
    exit 1
fi

YAML=${1}
shift
ARCH=${1}
shift
TARGET=${1}
shift

cleanup() {
    lxc delete --force "${CNAME}"
}

trap cleanup EXIT HUP INT TERM

# Create the container
lxc init "images:ubuntu/bionic/${ARCH}" "${CNAME}" -c security.privileged=true -c security.nesting=true

# Setup loop devices
lxc config device add "${CNAME}" loop-control unix-char path=/dev/loop-control major=10 minor=237 >/dev/null
for i in $(seq 0 254); do
    lxc config device add "${CNAME}" "loop${i}" unix-block "path=/dev/loop${i}" major=7 "minor=${i}" >/dev/null
done

# Start the container
lxc start "${CNAME}"

# Wait for network
sleep 10

set -x

lxc file push "${YAML}" "${CNAME}/root/image.yaml"
(
cat << EOF
#!/bin/sh
set -eux

ARCHIVE="http://us.archive.ubuntu.com/ubuntu"
if grep -q ports /etc/apt/sources.list; then
    ARCHIVE="http://us.ports.ubuntu.com/ubuntu-ports"
fi

# Setup clean sources
cat > /etc/apt/sources.list << EOL
deb \${ARCHIVE} bionic main universe restricted multiverse
deb \${ARCHIVE} bionic-updates main universe restricted multiverse
deb \${ARCHIVE} bionic-security main universe restricted multiverse
deb \${ARCHIVE} bionic-backports main universe restricted multiverse
EOL
apt-get update --yes

# Install dependencies
apt-get install --yes --no-install-recommends \
    golang-go git ca-certificates gcc libc6-dev \
    debootstrap xz-utils squashfs-tools gpg dirmngr gpg-agent rsync
export PATH=/root/go/bin:\${PATH}
export GOPATH=/root/go/

# Install distrobuilder
go get -v -x github.com/lxc/distrobuilder/distrobuilder

# Build the image
mkdir /root/build
mv /root/image.yaml /root/build/
cd /root/build/
SERIAL=\$(date -u +%Y%m%d_%H:%M)
distrobuilder build-dir image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
distrobuilder pack-lxc image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
distrobuilder pack-lxd image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
rm -Rf rootfs
echo "\${SERIAL}" > serial

exit 0
EOF
) | lxc file push - "${CNAME}/root/build.sh" --mode=755
lxc exec "${CNAME}" -- /root/build.sh "$@"
lxc exec "${CNAME}" -- tar -cf - -C /root/build/ . | tar -xvf - -C "${TARGET}"

[ -n "${SUDO_UID:-}" ] && chown "${SUDO_UID}" -R "${TARGET}"
[ -n "${SUDO_GID:-}" ] && chgrp "${SUDO_GID}" -R "${TARGET}"
