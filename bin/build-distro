#!/bin/sh -eu
CNAME="distrobuilder-$(uuidgen)"

# Check arguments
if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ]; then
    echo "Usage: ${0} <yaml> <architecture> <target dir> [flags]"
    exit 1
fi

YAML=${1}
shift
ARCH=${1}
shift
TARGET=${1}
shift

cleanup() {
    lxc delete --force "${CNAME}"
}

trap cleanup EXIT HUP INT TERM

# Create the container
lxc launch "images:ubuntu/xenial/${ARCH}" "${CNAME}" -c security.privileged=true -c security.nesting=true

# Wait for network
DNS=0

# shellcheck disable=SC2034
for i in $(seq 30); do
    sleep 1
    ! lxc exec "${CNAME}" -- cat /etc/resolv.conf 2>/dev/null | grep -q nameserver && continue

    DNS=1
    break
done

[ "${DNS}" = "0" ] && echo "Container failed to come online" && exit 1
set -x

lxc file push "${YAML}" "${CNAME}/root/image.yaml"
(
cat << EOF
ARCHIVE="http://us.archive.ubuntu.com/ubuntu"
if grep -q ports /etc/apt/sources.list; then
    ARCHIVE="http://us.ports.ubuntu.com/ubuntu-ports"
fi

# Setup clean sources
cat > /etc/apt/sources.list << EOL
deb ${ARCHIVE} xenial main universe restricted multiverse
deb ${ARCHIVE} xenial-updates main universe restricted multiverse
deb ${ARCHIVE} xenial-security main universe restricted multiverse
deb ${ARCHIVE} xenial-backports main universe restricted multiverse
EOL
apt-get update --yes

# Setup Go 1.10
apt-get install --yes --no-install-recommends \
    golang-1.10 git ca-certificates gcc libc6-dev \
    debootstrap xz-utils squashfs-tools
export PATH=/root/go/bin:/usr/lib/go-1.10/bin/:\${PATH}
export GOPATH=/root/go/

# Install distrobuilder
go get -v -x github.com/lxc/distrobuilder/distrobuilder

# Build the image
mkdir /root/build
mv /root/image.yaml /root/build/
cd /root/build/
SERIAL=\$(date -u +%Y%m%d_%H%M)
distrobuilder build-dir image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
distrobuilder pack-lxc image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
distrobuilder pack-lxd image.yaml rootfs -o image.serial="\${SERIAL}" "\$@"
rm -Rf rootfs
echo "\${SERIAL}" > serial

exit 0
EOF
) | lxc file push - "${CNAME}/root/build.sh" --mode=755
lxc exec "${CNAME}" -- /root/build.sh "$@"

lxc file pull -r "${CNAME}/root/build/" "${TARGET}"
mv "${TARGET}/build"/* "${TARGET}/"
rmdir "${TARGET}/build"
