#!/usr/bin/python3 -u
# Copyright 2014 - St√©phane Graber <stgraber@ubuntu.com>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
sys.path.insert(0, '.')

import argparse
import lxc_ci
import os
import traceback

parser = argparse.ArgumentParser(description="tarballs generator")
parser.add_argument("repository", metavar="REPOSITORY")
parser.add_argument("branch", metavar="BRANCH")
parser.add_argument("commit", metavar="COMMIT", default="HEAD")
parser.add_argument("template", metavar="TEMPLATE")
parser.add_argument("release", metavar="RELEASE")
parser.add_argument("arch", metavar="ARCH")
parser.add_argument("variant", metavar="VARIANT")
parser.add_argument("target", metavar="TARGET")
parser.add_argument("--builder-dist", metavar="DIST", default="ubuntu")
parser.add_argument("--builder-release", metavar="RELEASE", default="xenial")
parser.add_argument("--builder-arch", metavar="RELEASE", default=None)
args = parser.parse_args()

if os.geteuid():
    parser.error("Image building requires root privileges.")

try:
    build_env = lxc_ci.BuildEnvironment(args.builder_dist,
                                        args.builder_release,
                                        args.builder_arch)
    build_env.setup()

    config = lxc_ci.load_template_config(args.template, args.release,
                                         args.arch, args.variant)

    # Setup LXC
    if build_env.install(
            list(lxc_ci.LXC_BUILD_DEPENDENCIES[args.builder_dist]
                 ['default'])) != 0:
        build_env.exit_unstable()

    if build_env.architecture in \
            lxc_ci.LXC_BUILD_DEPENDENCIES[args.builder_dist]:
        if build_env.install(
            list(lxc_ci.LXC_BUILD_DEPENDENCIES[args.builder_dist]
                 [build_env.architecture])) != 0:
            build_env.exit_unstable()

    if build_env.install(
            list(lxc_ci.LXC_RUN_DEPENDENCIES[args.builder_dist]
                 ['default'])) != 0:
        build_env.exit_unstable()

    if build_env.architecture in \
            lxc_ci.LXC_RUN_DEPENDENCIES[args.builder_dist]:
        if build_env.install(
            list(lxc_ci.LXC_RUN_DEPENDENCIES[args.builder_dist]
                 [build_env.architecture])) != 0:
            build_env.exit_unstable()

    build_env.execute("""#!/bin/sh
mknod /dev/loop-control c 10 237
for i in $(seq 0 254); do
    mknod /dev/loop${i} b 7 ${i}
done
""")

    if build_env.execute(["git",
                          "clone", args.repository,
                          "-b", args.branch,
                          "/build/git"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["git", "reset", "--hard", args.commit],
                         "/build/git") != 0:
        build_env.exit_unstable()

    if build_env.execute(["./autogen.sh"], "/build/git/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["./configure", "--disable-doc", "--disable-apidoc",
                          "--disable-examples", "--disable-lua",
                          "--disable-python",
                          "--prefix=/usr/", "--sysconfdir=/etc/",
                          "--localstatedir=/var/"], "/build/git/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["make"], "/build/git/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["make", "install"], "/build/git/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["git",
                          "clone", "https://github.com/lxc/lxc-templates",
                          "-b", "master",
                          "/build/templates"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["./autogen.sh"], "/build/templates/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["./configure",
                          "--prefix=/usr/", "--sysconfdir=/etc/",
                          "--localstatedir=/var/"], "/build/templates/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["make"], "/build/templates/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["make", "install"], "/build/templates/") != 0:
        build_env.exit_unstable()


    # Create the image
    if build_env.execute(["mkdir", "-p",
                          "/build/containers/LXC_NAME/rootfs"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["cp", "/etc/lxc/default.conf",
                          "/build/containers/LXC_NAME/config"]) != 0:
        build_env.exit_unstable()

    env = []
    if "template_env" in config:
        for key, value in config['template_env'].items():
            env.append("%s=%s" % (key, value))

    if args.template == "debian" and args.release != "sid":
        build_env.execute(["ln", "-sf", "sid",
                           "/usr/share/debootstrap/scripts/%s" % args.release])

    if args.template == "ubuntu" and args.release != "gutsy":
        build_env.execute(["ln", "-sf", "gutsy",
                           "/usr/share/debootstrap/scripts/%s" % args.release])

    if build_env.execute(["env"] + env +
                         ["/usr/share/lxc/templates/lxc-%s" % args.template,
                          "--path", "/build/containers/LXC_NAME",
                          "--rootfs", "/build/containers/LXC_NAME/rootfs",
                          "--name", "LXC_NAME"]
                         + config['template_args']) != 0:
        build_env.exit_fail()

    # Run post-create hooks
    build_env.execute(["mount", "--bind", "/dev",
                       "/build/containers/LXC_NAME/rootfs/dev"])
    for cmd in config.get("post_create", []):
        if build_env.execute(["chroot", "/build/containers/LXC_NAME/rootfs",
                              "sh", "-c", cmd]) != 0:
            build_env.exit_fail()
    build_env.execute(["umount", "-l",
                       "/build/containers/LXC_NAME/rootfs/dev"])

    # Generate the config
    if build_env.execute("""#!/bin/sh -ex
cd /build/containers/LXC_NAME/rootfs/
find . -type b > /build/exclude-user
find . -type c >> /build/exclude-user
""") != 0:
        build_env.exit_unstable()

    build_env.download("/build/exclude-user", args.target)
    with open("%s/exclude-user" % args.target, "r") as fd:
        config['exclude_user'] = fd.read().strip().split("\n")
    os.remove("%s/exclude-user" % args.target)

    lxc_ci.generate_image_metadata(args.template, args.arch, config,
                                   args.target)

    # Compress and grab the result
    if build_env.execute(["tar", "-Jcf", "/build/rootfs.tar.xz",
                          "-C", "/build/containers/LXC_NAME/rootfs",
                          ".", "--numeric-owner", "--selinux"]) != 0:
        build_env.exit_unstable()

    build_env.download("/build/rootfs.tar.xz", args.target)

    build_env.exit_pass()

except Exception or KeyboardInterrupt:
    traceback.print_exc()
    build_env.exit_unstable()
