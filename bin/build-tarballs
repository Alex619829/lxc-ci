#!/bin/sh -eu
CNAME="lxc-tarballs-$(uuidgen)"

# Check arguments
if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ] || [ "${4:-}" = "" ] || [ "${5:-}" = "" ]; then
    echo "Usage: ${0} <arch> <repository> <branch> <commit> <target>"
    exit 1
fi

ARCH=${1}
shift
REPO=${1}
shift
BRANCH=${1}
shift
COMMIT=${1}
shift
TARGET=${1}
shift

cleanup() {
    lxc delete --force "${CNAME}"
}

trap cleanup EXIT HUP INT TERM

# Create the container
lxc copy "cache-lxc-${ARCH}" "${CNAME}"

# Start the container
lxc start "${CNAME}"

# Wait for network
while ! lxc info "${CNAME}" | grep -q "eth0.*inet.*10\\."; do
    sleep 5s
done

sleep 5s

set -x

(
cat << EOF
#!/bin/sh
set -eux

# Create build directories
mkdir -p /build/android /build/source

# Get the source
git clone "${REPO}" -b "${BRANCH}" /build/source
cd /build/source
git fetch "${REPO}" "+refs/pull/*:refs/remotes/origin/pr/*"
git checkout "${COMMIT}"

# Build the dist tarball
cd /build/source/
./autogen.sh
./configure --enable-doc --enable-apidoc --enable-python \
    --prefix=/usr/ --sysconfdir=/etc/ --localstatedir=/var/

make dist
mv *.tar.gz /build/lxc.tar.gz

# Build API doc
make -C doc
tar -zcf /build/apidoc.tar.gz -C /build/source/doc/api/html/ .

# Build manpages
cd /build/source/doc/
find . | grep \\\\.[0-9]$ | while read line; do
    dst_file="/build/man/\${line}"
    mkdir -p \$(dirname \$dst_file)
    cp \$line \$dst_file
done
tar -zcf /build/manpages.tar.gz -C /build/man/ .

exit 0
EOF
) | lxc file push - "${CNAME}/root/build.sh" --mode=755
lxc exec "${CNAME}" -- /root/build.sh "$@"

lxc file pull "${CNAME}/build/lxc.tar.gz" "${TARGET}"
lxc file pull "${CNAME}/build/apidoc.tar.gz" "${TARGET}"
lxc file pull "${CNAME}/build/manpages.tar.gz" "${TARGET}"

[ -n "${SUDO_UID:-}" ] && chown "${SUDO_UID}" -R "${TARGET}"
[ -n "${SUDO_GID:-}" ] && chgrp "${SUDO_GID}" -R "${TARGET}"
