#!/usr/bin/python3 -u
# Copyright 2017 - St√©phane Graber <stgraber@ubuntu.com>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
sys.path.insert(0, '.')

import argparse
import lxc_ci
import os
import tempfile
import time
import traceback
import yaml

parser = argparse.ArgumentParser(description="tarballs generator")
parser.add_argument("release", metavar="RELEASE")
parser.add_argument("arch", metavar="ARCH")
parser.add_argument("target", metavar="TARGET")
parser.add_argument("--builder-dist", metavar="DIST", default="ubuntu")
parser.add_argument("--builder-release", metavar="RELEASE", default="xenial")
parser.add_argument("--builder-arch", metavar="RELEASE", default=None)
parser.add_argument("--source", metavar="SOURCE",
                    default="http://cdimage.ubuntu.com/ubuntu-core")
args = parser.parse_args()

if os.geteuid():
    parser.error("Image building requires root privileges.")

try:
    if not args.builder_arch:
        args.builder_arch = args.arch

    build_env = lxc_ci.BuildEnvironment(args.builder_dist,
                                        args.builder_release,
                                        args.builder_arch)
    build_env.setup()

    # Install dependencies
    build_env.install(["busybox-static", "fuse", "squashfuse",
                       "squashfs-tools", "wget", "xz-utils"])

    # Setup for loop devices
    build_env.execute("""#!/bin/sh -ex
mknod /dev/loop-control c 10 237
for i in $(seq 0 254); do
    mknod /dev/loop${i} b 7 ${i}
done
""")

    # Download the image
    if build_env.execute([
        "wget",
        "%s/%s/stable/current/ubuntu-core-%s-%s.img.xz" % (args.source,
                                                         args.release,
                                                         args.release,
                                                         args.arch),
            "-O", "/build/core.img.xz"]) != 0:
        build_env.exit_unstable()

    # Unpack the image
    if build_env.execute("""#!/bin/sh -ex
# Uncompress the image
mkdir -p /build/mnt /build/rootfs /build/templates
xz -d /build/core.img.xz

# Extract the image
mount /build/core.img -t ext4 -o offset=54525952,loop /build/mnt/
cp -R /build/mnt/system-data /build/rootfs/

# Save some space
umount /build/mnt
rm /build/core.img

# Create all the needed paths and links
cd /build/rootfs/
mkdir bin dev initrd lib mnt proc root sbin sys
ln -s lib lib64
ln -s /bin/busybox bin/sh
ln -s /bin/init sbin/init

# Copy the system binaries
cp /bin/busybox bin/busybox
cp /sbin/mount.fuse bin/mount.fuse
cp /sbin/pivot_root bin/pivot_root
cp /usr/bin/squashfuse bin/squashfuse

# And needed libraries
cp -L /lib/*-linux-gnu/ld-linux*.so.2 lib/
cp -L /lib/*-linux-gnu/libc.so.6 lib/
cp -L /lib/*-linux-gnu/libdl.so.2 lib/
cp -L /lib/*-linux-gnu/libfuse.so.2 lib/
cp -L /usr/lib/*-linux-gnu/liblz4.so.1 lib/
cp -L /lib/*-linux-gnu/liblzma.so.5 lib/
cp -L /lib/*-linux-gnu/liblzo2.so.2 lib/
cp -L /lib/*-linux-gnu/libpthread.so.0 lib/
cp -L /lib/*-linux-gnu/libz.so.1 lib/
""") != 0:
        build_env.exit_unstable()

    # Copy the template files
    build_env.upload("images/ubuntu-core/init", "/build/rootfs/bin/init")
    for template in ("cloud-init-meta.tpl", "cloud-init-network.tpl",
                     "cloud-init-user.tpl", "cloud-init-vendor.tpl",
                     "hostname.tpl"):
        build_env.upload("images/ubuntu-core/%s" % template,
                         "/build/templates/%s" % template)

    # Generate the metadata
    arch = {"amd64": "x86_64",
            "i386": "i686"}

    meta = {}
    meta["architecture"] = arch[args.arch]
    meta["creation_date"] = int(time.time())
    meta["properties"] = {"os": "ubuntu core",
                          "release": "16",
                          "architecture": args.arch,
                          "description": "Ubuntu Core %s %s (release)" %
                          (args.release, args.arch)}
    templates = {}
    templates["/lxd/hostname"] = {"when": ["create", "copy"],
                                  "template": "hostname.tpl"}
    templates["/lxd/meta-data"] = {"when": ["create", "copy"],
                                   "template": "cloud-init-meta.tpl"}
    templates["/lxd/network-config"] = {"when": ["create", "copy"],
                                        "template": "cloud-init-network.tpl"}
    templates["/lxd/user-data"] = {"when": ["create", "copy"],
                                   "template": "cloud-init-user.tpl",
                                   "properties": {
                                        "default": "#cloud-config\n{}"}}
    templates["/lxd/vendor-data"] = {"when": ["create", "copy"],
                                     "template": "cloud-init-vendor.tpl",
                                     "properties": {
                                          "default": "#cloud-config\n{}"}}
    meta["templates"] = templates
    fd, path = tempfile.mkstemp()
    os.write(fd, yaml.dump(meta, default_flow_style=False).encode())
    os.close(fd)

    build_env.upload(path, "/build/metadata.yaml")
    os.remove(path)

    if build_env.execute(["tar", "-Jcf", "/build/lxd.tar.xz",
                          "-C", "/build/",
                          "metadata.yaml", "templates/"]) != 0:
        build_env.exit_unstable()
    build_env.download("/build/lxd.tar.xz", args.target)

    if build_env.execute(["mksquashfs", "/build/rootfs/",
                          "/build/rootfs.squashfs",
                          "-comp", "xz", "-b", "1M"]) != 0:
        build_env.exit_unstable()
    build_env.download("/build/rootfs.squashfs", args.target)

    build_env.exit_pass()

except Exception or KeyboardInterrupt:
    traceback.print_exc()
    build_env.exit_unstable()
