#!/bin/sh -eu
[ -e /lxc-ci/etc/config ] && . /lxc-ci/etc/config

if [ "${1:-}" = "" ] || [ "${2:-}" = "" ] || [ "${3:-}" = "" ] || [ "${4:-}" = "" ] || [ "${5:-}" = "" ]; then
    echo "Usage: $0 <filter> <series> <kernel> <script> [args...]"
    exit 1
fi

# Login to maas
echo "==> Connecting to MAAS"
maas login maas "${MAAS_URL}" "${MAAS_API}" >/dev/null

# Allocate a machine
echo "==> Allocating a machine"
while :; do
    TMPFILE=$(mktemp)

    set +e
    maas maas machines allocate arch=amd64 "${1}" > "${TMPFILE}" 2>&1
    RET=$?
    if [ "${RET}" = "2" ]; then
        echo "===> System is currently busy, trying again in 60s"
        sleep 60
        continue
    elif [ "${RET}" != "0" ]; then
        echo "==> Failed to allocate"
        cat "${TMPFILE}"
        rm "${TMPFILE}"
    fi
    set -e

    break
done

system_id=$(jq -r .system_id < "${TMPFILE}")

# Release on exit
RET=1
cleanup() {
    set +e

    echo "==> Releasing the machine"
    maas maas machine release "${system_id}" >/dev/null
    while :; do
        status=$(maas maas machine read "${system_id}" | jq -r .status_name)
        if [ "${status}" = "Releasing failed" ]; then
            maas maas machine release "${system_id}" >/dev/null
            sleep 5
            continue
        fi

        if [ "${status}" = "Releasing" ]; then
            sleep 5
            continue
        fi

        break
    done

    if [ "${RET}" = "0" ]; then
        echo ""
        echo "==> Test passed"
        exit 0
    fi

    echo ""
    echo "==> Test failed"
    exit ${RET}
}
trap cleanup EXIT HUP INT TERM

# Deploy the machine
FAIL=1
# shellcheck disable=SC2034
for i in $(seq 3); do
    echo "==> Deploying ${2}"
    maas maas machine deploy "${system_id}" "distro_series=${2}" "hwe_kernel=${3}" >/dev/null || continue

    # Wait for the deployment to complete
    FAIL=0
    while :; do
        [ "$(maas maas machine read "${system_id}" | jq -r .status_name)" = "Deployed" ] && break

        if [ "$(maas maas machine read "${system_id}" | jq -r .status_name)" = "Failed deployment" ]; then
            FAIL=1
            echo "==> Failed to deploy"
            break
        fi

        sleep 30
    done

    [ "${FAIL}" = 0 ] && break
done

[ "${FAIL}" = 1 ] && exit 1

# Wait for SSH
echo "==> Waiting for SSH to respond"
IP=$(maas maas machine read "${system_id}" | jq .ip_addresses[0] -r)
while :; do
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/id_rsa "ubuntu@${IP}" true 2>/dev/null && break
    sleep 5
done

# Setup custom kernel
kernel=${4}
if [ "${kernel}" != "default" ]; then
    echo "==> Installing custom kernel"
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/id_rsa "ubuntu@${IP}" sudo sh /dev/stdin "${kernel}" < "bin/maas-kernel" || true

    sleep 30

    while :; do
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/id_rsa "ubuntu@${IP}" true 2>/dev/null && break
        sleep 5
    done
fi

# Connect and run something
script=${5}
shift
shift
shift
shift
shift
echo "==> Running the job"
if echo "${IP}" | grep -q ":"; then
    scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/id_rsa "${script}" "ubuntu@[${IP}]:test-script"
else
    scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/id_rsa "${script}" "ubuntu@${IP}:test-script"
fi
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/id_rsa "ubuntu@${IP}" sudo sh test-script "$@"

if [ -n "${WORKSPACE:-}" ]; then
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/id_rsa "ubuntu@${IP}" sudo cat artifacts.tar.gz | tar zxvf - -C "${WORKSPACE}" >/dev/null 2>&1 || true
fi

# Success
RET=0
