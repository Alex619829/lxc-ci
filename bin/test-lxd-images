#!/bin/sh
set -eu

cleanup() {
    echo ""
    if [ "${FAIL}" = "1" ]; then
        echo "Test failed"
        exit 1
    fi

    echo "Test passed"
    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

# Install LXD
while :; do
    [ ! -e /usr/bin/lxd ] && break
    apt remove --purge lxd lxd-client --yes && break
done
snap install lxd --edge
apt install jq -y
export PATH="/snap/bin/:${PATH}"
lxd waitready --timeout=300

# Setup network
lxc network create lxdbr0 ipv4.address=10.0.0.1/16 ipv4.nat=true ipv6.address=2001:470:b368:4242::1/64 ipv6.nat=true
lxc network attach-profile lxdbr0 default eth0 eth0

# Setup storage
for backend in zfs btrfs dir; do
    if [ "${backend}" = "dir" ]; then
        lxc storage create default ${backend} >/dev/null 2>&1 && break
    else
        lxc storage create default ${backend} size=30GB >/dev/null 2>&1 && break
    fi
done

lxc storage show default >/dev/null 2>&1 || exit 1
lxc profile device add default root disk pool=default path=/

# Create the containers
for i in $(lxc image list images: | grep x86_64 | grep "more" | awk '{print $2}'); do
    name=$(echo "${i}" | sed -e "s/\//-/g" -e "s/\.//g")
    lxc init "images:${i}" "${name}-unpriv" -c security.nesting=true
    lxc init "images:${i}" "${name}-priv" -c security.privileged=true -c security.nesting=true

    if [ "${name}" = "voidlinux" ] || [ "${name}" = "voidlinux-musl" ]; then
        # Workaround weird init system
        lxc config set "${name}-unpriv" raw.lxc lxc.signal.halt=SIGCONT
        lxc config set "${name}-priv" raw.lxc lxc.signal.halt=SIGCONT
    fi
done

# Start them all
COUNT=0
for url in $(lxc query "/1.0/containers" | jq -r .[]); do
    name=$(echo "${url}" | cut -d/ -f4)
    lxc start "${name}"

    COUNT=$((COUNT+1))
    if [ "${COUNT}" = "3" ]; then
        COUNT=0
        sleep 10
    fi
done

# Wait for network
sleep 20

# Check that all containers have an IPv4 and IPv6 address
FAIL=0
for url in $(lxc query "/1.0/containers" | jq -r .[]); do
    address=$(lxc query "${url}/state" | jq -r ".network.eth0.addresses | .[] | select(.scope | contains(\"global\")) | .address")
    name=$(echo "${url}" | cut -d/ -f4)
    echo ""

    # IPv4
    if echo "${address}" | grep "\." -q; then
        echo "PASS-IPv4: ${name}"
    else
        echo "FAIL-IPv4: ${name}"
        FAIL=1
    fi

    # IPv6
    if echo "${address}" | grep ":" -q; then
        echo "PASS-IPv6: ${name}"
    else
        echo "FAIL-IPv6: ${name}"
        FAIL=1
    fi
done

# Check that all containers can be stopped
if ! lxc stop --all --timeout=60; then
    FAIL=1
fi
