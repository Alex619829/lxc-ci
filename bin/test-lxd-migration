#!/bin/sh
set -eu

series=${1:-xenial-updates}
track=${2:-latest}
channel=${3:-stable}

export DEBIAN_FRONTEND=noninteractive

cleanup() {
    if [ "${FAIL}" = "1" ]; then
        echo ""
        echo "Test failed"
        exit 1
    fi
}

launch() {
    if [ "${series}" = "xenial-updates" ]; then
        lxc launch images:alpine/edge "${1}"
    else
        lxc launch images:alpine/edge "${1}" -n lxdbr0 -s "${2}"
    fi
}

FAIL=0
trap cleanup EXIT HUP INT TERM

# Make sure we're up to date
while :; do
    apt-get update && break
    sleep 10
done

while :; do
    apt-get dist-upgrade --yes && break
    sleep 10
done

# Install the LXD deb
apt-get install -t "${series}" --no-install-recommends --yes lxd lxd-client jq
apt-get install --no-install-recommends --yes zfsutils-linux thin-provisioning-tools

# Configure the LXD deb
if [ "${series}" = "xenial-updates" ]; then
    # LXD 2.0
    lxd waitready --timeout=120
    lxd init --auto --storage-backend=zfs --storage-create-loop=10 --storage-pool=lxd

    cat > /etc/default/lxd-bridge << EOF
USE_LXD_BRIDGE=true
LXD_BRIDGE=lxdbr0
UPDATE_PROFILE=true
LXD_CONFILE=
LXD_DOMAIN=lxd
LXD_IPV4_ADDR=10.0.3.1
LXD_IPV4_NETMASK=255.255.255.0
LXD_IPV4_NETWORK=10.0.3.0/24
LXD_IPV4_DHCP_RANGE=10.0.3.2,10.0.3.254
LXD_IPV4_DHCP_MAX=250
LXD_IPV4_NAT=true
LXD_IPV6_ADDR=2001:470:b368:4242::1
LXD_IPV6_MASK=64
LXD_IPV6_NETWORK=2001:470:b368:4242::/64
LXD_IPV6_NAT=true
LXD_IPV6_PROXY=false
EOF

    systemctl restart lxd-bridge

    lxd waitready --timeout=120
else
    # LXD 2.x
    lxd waitready --timeout=120

    # Base configuration
    lxc network create lxdbr0
    lxc storage create dir dir source=/mnt
    lxc storage create zfs zfs
    lxc storage create lvm lvm
    lxc storage create btrfs btrfs

    # Custom volumes
    lxc storage volume create dir foo
    lxc storage volume create zfs foo
    lxc storage volume create lvm foo
    lxc storage volume create btrfs foo
fi

# Create some containers
launch c1 dir
launch c2 zfs
launch c3 lvm
launch c4 btrfs

# Create some snapshots
lxc snapshot c1
lxc snapshot c2
lxc snapshot c3
lxc snapshot c4

# Pre-migration listing
sleep 30
lxc list

# Install the LXD snap
if [ "${track}" = "latest" ]; then
    snapd_channel=${channel}
else
    snapd_channel=${track}/${channel}
fi

# Configure to use the proxy
curl -s http://canonical-lxd.stgraber.org/config/snapd.sh | sh

snap install lxd --channel="${snapd_channel}"
export PATH="/snap/bin/:${PATH}"
lxd waitready --timeout=120

# Run the migration
lxd.migrate --yes

# Show a new listing
sleep 30
lxc list

# Check that all containers have an IPv4 and IPv6 address
FAIL=0
for url in $(curl -s --unix-socket /var/snap/lxd/common/lxd/unix.socket "lxd/1.0/containers" | jq -r ".metadata | .[]"); do
    address=$(curl -s --unix-socket /var/snap/lxd/common/lxd/unix.socket "lxd${url}/state" | jq -r ".metadata.network.eth0.addresses | .[] | select(.scope | contains(\"global\")) | .address")
    name=$(echo "${url}" | cut -d/ -f4)
    echo ""

    # IPv4
    if echo "${address}" | grep "\." -q; then
        echo "PASS-IPv4: ${name}"
    else
        echo "FAIL-IPv4: ${name}"
        FAIL=1
    fi

    # IPv6
    if echo "${address}" | grep ":" -q; then
        echo "PASS-IPv6: ${name}"
    else
        echo "FAIL-IPv6: ${name}"
        FAIL=1
    fi
done

# Create some snapshots (catch possible error in sqlite_sequence)
lxc snapshot c1
lxc snapshot c1
lxc snapshot c1
