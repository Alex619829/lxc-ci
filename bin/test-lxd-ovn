#!/bin/sh
set -eu

cleanup() {
    echo ""
    if [ "${FAIL}" = "1" ]; then
        echo "Test failed"
        exit 1
    fi

    echo "Test passed"
    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

# Wait for snapd seeding
sleep 1m

# Configure to use the proxy
curl -s http://canonical-lxd.stgraber.org/config/snapd.sh | sh

# Install LXD
while :; do
    [ ! -e /usr/bin/lxd ] && break
    apt remove --purge lxd lxd-client --yes && break
done
snap install lxd --edge
snap install jq
snap refresh lxd --channel=latest/edge
lxd waitready --timeout=300

# Install OVN
apt install ovn-host ovn-central --yes

# Configure OVN
set -x
ovs-vsctl set open_vswitch . \
  external_ids:ovn-remote=unix:/var/run/ovn/ovnsb_db.sock \
  external_ids:ovn-encap-type=geneve \
  external_ids:ovn-encap-ip=127.0.0.1

# Configure LXD
lxc storage create default zfs
lxc profile device add default root disk path=/ pool=default

lxc network create lxdbr0 \
    ipv4.address=10.10.10.1/24 ipv4.nat=true \
    ipv4.dhcp.ranges=10.10.10.2-10.10.10.199 \
    ipv4.ovn.ranges=10.10.10.200-10.10.10.254 \
    ipv6.address=fd42:4242:4242:1010::1/64 ipv6.nat=true \
    ipv6.ovn.ranges=fd42:4242:4242:1010::200-fd42:4242:4242:1010::254

lxc network create ovn-virtual-network network=lxdbr0 --type=ovn

# Test
set +x
lxc network list

echo "==> Launching a test container on lxdbr0"
lxc init images:ubuntu/20.04 u1
lxc config device add u1 eth0 nic network=lxdbr0 name=eth0
lxc start u1

echo "==> Launching a first test container on ovn-virtual-network"
lxc init images:ubuntu/20.04 u2
lxc config device add u2 eth0 nic network=ovn-virtual-network name=eth0
lxc start u2

echo "==> Launching a second test container on ovn-virtual-network"
lxc init images:ubuntu/20.04 u3
lxc config device add u3 eth0 nic network=ovn-virtual-network name=eth0
lxc start u3

echo "==> Wait for addresses"
sleep 10
lxc list

echo "==> Testing connectivity"
U1_IPV4="$(lxc list u1 -c4 --format=csv | cut -d' ' -f1)"
U1_IPV6="$(lxc list u1 -c6 --format=csv | cut -d' ' -f1)"
U2_IPV4="$(lxc list u2 -c4 --format=csv | cut -d' ' -f1)"
U2_IPV6="$(lxc list u2 -c6 --format=csv | cut -d' ' -f1)"
U3_IPV4="$(lxc list u3 -c4 --format=csv | cut -d' ' -f1)"
U3_IPV6="$(lxc list u3 -c6 --format=csv | cut -d' ' -f1)"

echo "==> lxdbr0 to internet"
lxc exec u1 -- ping -c1 -4 linuxcontainers.org
lxc exec u1 -- ping -c1 -6 linuxcontainers.org

echo "==> lxdbr0 to OVN gateway"
lxc exec u1 -- ping -c1 -4 10.10.10.200
lxc exec u1 -- ping -c1 -6 fd42:4242:4242:1010::200

echo "==> OVN to internet"
lxc exec u2 -- ping -c1 -4 linuxcontainers.org
lxc exec u2 -- ping -c1 -6 linuxcontainers.org

echo "==> OVN to OVN"
lxc exec u2 -- ping -c1 -4 "${U3_IPV4}"
lxc exec u2 -- ping -c1 -6 "${U3_IPV6}"

echo "==> OVN to lxdbr0"
lxc exec u3 -- ping -c1 -4 "${U1_IPV4}"
lxc exec u3 -- ping -c1 -6 "${U1_IPV6}"

echo "==> DNS resolution on OVN"
lxc exec u3 -- ping -c1 -4 u2.lxd
lxc exec u3 -- ping -c1 -6 u2.lxd

echo "===> Testing projects"
lxc project create testovn -c features.networks=true -c limits.networks=1
lxc project switch testovn
lxc profile device add default root disk path=/ pool=default

# Create network inside project with same name and subnet as network in default project.
lxc network create ovn-virtual-network network=lxdbr0 --type=ovn ipv4.address="$(lxc network get ovn-virtual-network ipv4.address --project default)" ipv6.address="$(lxc network get ovn-virtual-network ipv6.address --project default)"

# Test we cannot exceed specified project limits for networks.
! lxc network create ovn-virtual-network-toomany network=lxdbr0 --type=ovn

echo "==> Launching a first test container on testovn project ovn-virtual-network"
lxc init images:ubuntu/20.04 u2
lxc config device add u2 eth0 nic network=ovn-virtual-network name=eth0
lxc start u2

echo "==> Launching a second test container on testovn project ovn-virtual-network"
lxc init images:ubuntu/20.04 u3
lxc config device add u3 eth0 nic network=ovn-virtual-network name=eth0
lxc start u3

echo "==> Wait for addresses"
sleep 10
lxc list

echo "==> Testing connectivity"

U2_IPV4="$(lxc list u2 -c4 --format=csv | cut -d' ' -f1)"
U2_IPV6="$(lxc list u2 -c6 --format=csv | cut -d' ' -f1)"
U3_IPV4="$(lxc list u3 -c4 --format=csv | cut -d' ' -f1)"
U3_IPV6="$(lxc list u3 -c6 --format=csv | cut -d' ' -f1)"

echo "==> lxdbr0 to OVN gateway in project testovn"
lxc exec u1 --project default -- ping -c1 -4 10.10.10.201
lxc exec u1 --project default -- ping -c1 -6 fd42:4242:4242:1010::201

echo "==> OVN to internet in project testovn"
lxc exec u2 -- ping -c1 -4 linuxcontainers.org
lxc exec u2 -- ping -c1 -6 linuxcontainers.org

echo "==> OVN to OVN in project testovn"
lxc exec u2 -- ping -c1 -4 "${U3_IPV4}"
lxc exec u2 -- ping -c1 -6 "${U3_IPV6}"

echo "==> OVN to lxdbr0 in project testovn"
lxc exec u3 -- ping -c1 -4 "${U1_IPV4}"
lxc exec u3 -- ping -c1 -6 "${U1_IPV6}"

echo "==> DNS resolution on OVN in project testovn"
lxc exec u3 -- ping -c1 -4 u2.lxd
lxc exec u3 -- ping -c1 -6 u2.lxd

echo "===> Check network in use protection from deletion"
# Delete instances in default project first.
lxc delete -f u1 u2 u3 --project default

# Check we cannot delete lxdbr0 (as it is parent of OVN networks).
! lxc network delete lxdbr0 --project default

# Delete OVN network in default project.
lxc network delete ovn-virtual-network --project default

# Check we cannot delete lxdbr0 (as it is still parent of OVN network in project).
! lxc network delete lxdbr0 --project default

# Check we cannot delete OVN network in project due to instances using it.
! lxc network delete ovn-virtual-network

# Remove instances using OVN network in project.
lxc delete -f u2 u3

# Delete OVN network in project and parent in default project.
lxc network delete ovn-virtual-network
lxc network delete lxdbr0 --project default

FAIL=0
