#!/usr/bin/python3 -u
# Copyright 2014 - St√©phane Graber <stgraber@ubuntu.com>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
sys.path.insert(0, '.')

import argparse
import lxc_ci
import os
import traceback

parser = argparse.ArgumentParser(description="gcc testbuild")
parser.add_argument("tarball", metavar="TARBALL")
parser.add_argument("--builder-dist", metavar="DIST", default="ubuntu")
parser.add_argument("--builder-release", metavar="RELEASE", default="trusty")
parser.add_argument("--builder-arch", metavar="RELEASE", default=None)
parser.add_argument("--use-daily", dest="daily", action="store_true",
                    default=False)
args = parser.parse_args()

try:
    build_env = lxc_ci.BuildEnvironment(args.builder_dist,
                                        args.builder_release,
                                        args.builder_arch)
    build_env.setup()

    if args.daily:
        build_env.install(["apt-get", "install",
                           "software-properties-common", "-y"])
        build_env.execute(["apt-add-repository",
                           "ppa:ubuntu-lxc/daily", "-y"])
        build_env.update()

    if build_env.install(
            list(lxc_ci.LXC_BUILD_DEPENDENCIES[args.builder_dist]
                 ['default'])) != 0:
        build_env.exit_unstable()

    if build_env.architecture in \
            lxc_ci.LXC_BUILD_DEPENDENCIES[args.builder_dist]:
        if build_env.install(
            list(lxc_ci.LXC_BUILD_DEPENDENCIES[args.builder_dist]
                 [build_env.architecture])) != 0:
            build_env.exit_unstable()

    if build_env.install(
            list(lxc_ci.LXC_RUN_DEPENDENCIES[args.builder_dist]
                 ['default'])) != 0:
        build_env.exit_unstable()

    if build_env.architecture in \
            lxc_ci.LXC_RUN_DEPENDENCIES[args.builder_dist]:
        if build_env.install(
            list(lxc_ci.LXC_RUN_DEPENDENCIES[args.builder_dist]
                 [build_env.architecture])) != 0:
            build_env.exit_unstable()

    build_env.upload(args.tarball, "/tmp/upstream.tar.gz")
    build_env.upload("deps/exercise", "/tmp/exercise")

    if build_env.execute(["tar", "zxf", "/tmp/upstream.tar.gz",
                          "--strip", "1"], "/build/") != 0:
        build_env.exit_unstable()

    if build_env.execute(["./autogen.sh"], "/build/") != 0:
        build_env.exit_fail()

    if build_env.execute(["./configure", "--enable-tests",
                          "--prefix=/usr/", "--sysconfdir=/etc/",
                          "--localstatedir=/var/"], "/build/") != 0:
        build_env.exit_fail()

    # Test build
    if build_env.execute(["make"], "/build/") != 0:
        build_env.exit_fail()

    # Testsuite run
    if build_env.execute(["make", "install"], "/build/") != 0:
        build_env.exit_fail()

    if build_env.execute(["sed", "-i", 's/USE_LXC_BRIDGE="false"/'
                                       'USE_LXC_BRIDGE="true"/g',
                          "/etc/default/lxc"]):
            build_env.exit_fail()

    rootfs = build_env.container.get_config_item("lxc.rootfs")
    if os.path.exists(os.path.join(rootfs, "etc", "init", "lxc-net.conf")):
        if build_env.execute(["sed", "-i", "s/10\\.0\\.3\\./10.12.34./g",
                              "/etc/init/lxc-net.conf"]) != 0:
            build_env.exit_fail()

    if os.path.exists(os.path.join(rootfs, "usr", "share",
                                   "lxc", "lxc.net")):
        if build_env.execute(["sed", "-i", "s/10\\.0\\.3\\./10.12.34./g",
                              "/usr/share/lxc/lxc.net"]) != 0:
            build_env.exit_fail()

    if os.path.exists(os.path.join(rootfs, "usr", "libexec",
                                   "lxc", "lxc-net")):
        if build_env.execute(["sed", "-i", "s/10\\.0\\.3\\./10.12.34./g",
                              "/usr/libexec/lxc/lxc-net"]) != 0:
            build_env.exit_fail()

    if build_env.execute(["useradd", "--system", "lxc-dnsmasq"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["start", "lxc-net"]) != 0:
        build_env.exit_fail()

    if build_env.execute(["mkdir", "-p",
                          "/usr/share/doc/python3-lxc/examples/"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["cp", "-p",
                          "/build/src/python-lxc/examples/api_test.py",
                          "/usr/share/doc/python3-lxc/examples/"
                          "api_test.py"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["gzip", "-9",
                          "/usr/share/doc/python3-lxc/examples/"
                          "api_test.py"]) != 0:
        build_env.exit_unstable()

    if build_env.execute(["/tmp/exercise"]) != 0:
        build_env.exit_fail()

    # Test run
    build_env.exit_pass()

except Exception or KeyboardInterrupt:
    traceback.print_exc()
    build_env.exit_unstable()
